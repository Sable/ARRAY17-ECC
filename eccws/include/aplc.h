/*
   aplc.h
   Include file for C code generated by APL to C compiler.
*/

#ifndef APLCDEFINED
#define APLCDEFINED

/* Data types */
#define BOOLTYPE   0
#define INTTYPE    1
#define DOUBLETYPE 2
#define CHARTYPE   3

/* Grade up or down */
/*#define GRADEUP     1 93/1/25 avoid poss name conflict */
/*#define GRADEDOWN  -1                                  */

/* Macros */
#ifndef max
#define max(A,B) (A>B? A : B)
#endif
#ifndef min
#define min(A,B) (A<B? A : B)
#endif        /*moved to Globals.h 98/7/25 */
#define imod(A,B) (A==0? B: (A>0&&B>0||A<0&&B<0)? (B%A):B%A==0? 0:A+B%A)
#define gmod(A,B) (A==0 ? B : B - A*floor(QDCT+((double) B)/(double) A))
#define sig(A) (A==0 ? 0 : A>0 ? 1: -1)

#define inchp0 if ((r15-=(r0+31)>>5<<2) <0) alloc(0) //***************
#define inchp1 if ((r15-=r0<<2) <0) alloc(1)
#define inchp2 r15-=r0<<3;r15>>=3;r15<<=3;if(r15<0) alloc(2)
#define inchp3 if ((r15-=(r0+3)>>2<<2) <0) alloc(3)  //*** 7/12 wc ***

/* Usefull constants */
#define msk    0x0000001f
#define alf    (unsigned) 0xffffffff
#define lfb    (unsigned) 0x80000000
/*#define lf1    0x80000000   92/12/7 out for EVL */
#define pi     3.141592653589793
#define maxi   2147483647
#define mini   -2147483647


#define DBLFMTBD  1.0e-5   /* if r<DBLFMTBD, we use %e format*/


/* Store format data representation */
typedef struct stofm2 {char *valp; int maxl,reall;} STOFM2;
typedef struct stofm3 {char *valp; int maxl,reall; int dims[7];} STOFM3;

typedef union {
   STOFM2 fm2;
   STOFM3 fm3;
   } DESCRIPT;

/* Functions */
void a_grade(void*, int, int*, int, int, int);
int  apl_sec();
void aplbit0();
char *a_fmtD();  /* format double array */
char *a_fmtI();  /* format integer array */
FILE *a_fopen(); /* open file, print error if so */
void a_prtD0();  /* for printing double precision data */
int randomn(int);   /* VS APL random number generator */
void alloc();
int no_of_ones(int, int*); /* 92/11/21 was void */
double efac(int); /* 93/4/26 */
double ebin(int, int); /* 93/4/26 */
void * amalloc(int); /* 93/6/12 */
void * acalloc(int, int); /* 93/6/12 */
void mat_inverse(double *, double *, int);
void boolcvi(int*, int*, int, int);
void boolcvd(double*, int*, int, int);
void boolcv1i(int*, int*, int, int, int);
void boolcv1d(double*, int*, int, int, int);
void bitsmove(int*, int*, int, int);
void bitsmovc(int*, int*, int, int, int);
void bitsmov0(int*, int*, int, int, int);
void bitsmovs(int*, int, int, int, int);
void bitsmov1(int*, int*, int, int, int);
int findfst0(int*, int, int);
int findfst1(int*, int, int);
void boolidxof(int*, int*, int*, int, int, int);
void wrapmove(int*, int*, int, int);
void breductv(int*, int*, int, int);
int  breduct0(int*, int);
void bscan0(int*, int*, int);
void bscan20m(int*, int*, int, int);
void bscan20v(int*, int*, int, int);
void gscan20m(int*, int*, int, int);
void gscan20v(int*, int*, int, int);
void copybits1(int*, int, int, int);
void aplbit1(int, int, int*, int*);
void aplbit2(int, int, int*, int*);
void reversd(double*, double*, int, int, int, int, int);
void reversc(char*, char*, int, int, int, int, int);
void areversi(int*, int*, int, int, int, int);
void areversm(double*, int*, int, int, int, int);
void areversd(double*, double*, int, int, int, int);
void areversc(char *, char *, int, int, int, int);
void aplbit3(int, int, int*, int*);
void all1s(int*, int);
//void passparmb(FILE*, int*, int);
void reversi(int*, int*, int, int, int, int, int);
void reversm(double*, int*, int, int, int, int, int);
void breversi(int*, int*, int);
void breversm(double*, int*, int);
void breversd(double*, double*, int);
void breversc(char*, char*, int);
void rotatfxi(int *, int *, int *, int, int, int);
void rotatfxd(double*, int *, double *, int, int);
void rotatfxc(char *, int *, char *, int, int);
void rotatfxm(double*, int *, int *, int, int);
void prntbool(int*, int);
void takei(int *, int *, int, int, int);
void taked(double*, double*, int, int, int);
void takec(char *, char *, int, int, int);
void takem(double*, int *, int, int, int);
void tak2d(double*, int*, double*, int, int, int, int, int*,int*, int*);
void tak2i(int*, int*, int*, int, int, int, int, int*,int*, int*);
void tak2m(double*, int*, int*, int, int, int, int, int*,int*, int*);
void tak2c(char *, int*, char*, int, int, int, int, int*,int*, int*);
void bol1idxof(int*, int, int*, int, int);
int membsp0b(int, int*, int);
//void membspi(int*, int*, int, int*, int);
//void membspd(int*, double*, int, double*, int);
//void membspm(int*, double*, int, int*, int);
//void membspn(int*, int*, int, double*, int);
//void membspc(int*, char*, int, char*, int);
void membspi(long*, long*, int, long*, int);     //0/8/12
void membspd(long*, double*, int, double*, int);//0/8/12
void membspm(long*, double*, int, long*, int);
void membspn(long*, long*, int, double*, int);
void membspc(long*, char*, int, char*, int);    //0/8/12
void idxofi(int*, int*, int, int*, int, int);
void idxofd(int*, double*, int, double*, int, int);
void idxofm(int*, double*, int, int*, int, int);
void idxofn(int*, int*, int, double*, int, int);
void idxofc(int*, char*, int, char*, int, int);
int ifac(int);
void ludcmp(double *a,int n,int *indx,double *d);//added*****************
void lubksb(double *a,int n,int *indx,double *b);//added*********
#endif
